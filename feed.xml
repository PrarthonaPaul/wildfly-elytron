<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>WildFly Elytron</title>
        <link>https://wildfly-security.github.io/wildfly-elytron</link>
        <description></description>
        <lastBuildDate>Mon, 19 Aug 2024 19:10:42 +0000</lastBuildDate>
        
        <item>
            <title>Using Credential Stores With Encrypted Expressions on WildFly</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/credential-store-for-encrypted-expressions/
            </link>
            <description>
                WildFly allows the use of credential stores to keep alias for sensitive information, such as, passwords for external services. Credential stores can be used to store different credentials under aliases and use credential-reference to specify them in server configuration. As a result, the sensitive information is no longer visible in...
            </description>
            <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/credential-store-for-encrypted-expressions/
            </guid>
        </item>
        
        <item>
            <title>Using Credential Stores to Replace Clear Text Passwords in WildFly</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/credential-store-for-passwords/
            </link>
            <description>
                WildFly allows the use of credential stores to keep aliases for sensitive information, such as, passwords for external services. Credential stores can be used to store different credentials under aliases and use credential-reference to specify them in server configuration. As a result, the credential is no longer visible in clear...
            </description>
            <pubDate>Wed, 14 Aug 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/credential-store-for-passwords/
            </guid>
        </item>
        
        <item>
            <title>Sending Request Objects as A JWT Using Request Parameters for OIDC</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/oidc-cient-request/
            </link>
            <description>
                WildFly 33 includes the ability to send the request object as a Json Web Token (JWT) when securing an application using OIDC. The feature also includes the ability to sign and/or encrypt the JWT for added security. OpenID Connect is an identity layer on top of the OAuth 2.0 protocol...
            </description>
            <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/oidc-cient-request/
            </guid>
        </item>
        
        <item>
            <title>Dynamic client SSL context that automatically delegates to different SSLContexts based on the host and port of the peer</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/dynamic-client-ssl-context/
            </link>
            <description>
                WildFly 32 running at a community stability level or lower includes the ability to configure the dynamic SSL context. This dynamic SSL context delegates to other instances of SSL contexts that are selected based on the host and port of the peer. Prerequisites New dynamic-client-ssl-context resource Example configuration on the...
            </description>
            <pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/dynamic-client-ssl-context/
            </guid>
        </item>
        
        <item>
            <title>Caching realm now automatically tries to authenticate users with the underlying realm if authentication with cached credentials fails</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/caching-security-realm-authenticate-with-underlying-realm-on-failure/
            </link>
            <description>
                WildFly 32+ will automatically attempt to verify credentials with the underlying realm if an authentication fails with the cached credentials. If this authentication succeeds, the obsolete credential will be replaced with the updated credential. This functionality is useful if the credentials have been updated externally of WildFly. Caching security realm...
            </description>
            <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/caching-security-realm-authenticate-with-underlying-realm-on-failure/
            </guid>
        </item>
        
        <item>
            <title>Securing a WildFly Application Using OpenID Connect With Additional Scope Values</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/elytron-oidc-client-scope/
            </link>
            <description>
                WildFly 32 includes the ability to add additional scope values when securing applications using OpenID Connect (OIDC). This new feature is available at the Preview stability level. OpenID Connect is an identity layer on top of the OAuth 2.0 protocol that makes it possible for a client to verify a...
            </description>
            <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/elytron-oidc-client-scope/
            </guid>
        </item>
        
        <item>
            <title>Trying Out An Upcoming Security Feature for WildFly on OpenShift</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/in-progress-wildfly-feature-on-openshift/
            </link>
            <description>
                A future release of WildFly will include the ability to add additional scope values when securing applications using OpenID Connect (OIDC). This blog post demonstrates how to secure a WildFly application using OpenID Connect and configure scope values to request additional claims using an in-progress version of the feature. This...
            </description>
            <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/in-progress-wildfly-feature-on-openshift/
            </guid>
        </item>
        
        <item>
            <title>Vlog: Securing WildFly Apps with Okta on OpenShift</title>
            <link>
                https://www.youtube.com/watch?v=usquALvL2qc
            </link>
            <description>
                
            </description>
            <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
            <guid>
                https://www.youtube.com/watch?v=usquALvL2qc
            </guid>
        </item>
        
        <item>
            <title>Securing WildFly Applications Using Okta on OpenShift</title>
            <link>
                https://wildfly-security.github.io/wildfly-elytron/blog/securing-wildfly-apps-okta-openshift/
            </link>
            <description>
                WildFly applications can be secured using OpenID Connect and deployed to OpenShift. By using OIDC to secure applications, you delegate authentication to OIDC providers. The elytron-oidc-client subsystem can be used to secure an application deployed to WildFly using any OpenID Provider. This guide demonstrates how to secure an example application...
            </description>
            <pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate>
            <guid>
                https://wildfly-security.github.io/wildfly-elytron/blog/securing-wildfly-apps-okta-openshift/
            </guid>
        </item>
        
        <item>
            <title>Vlog: Securing WildFly Apps with Auth0 on OpenShift</title>
            <link>
                https://www.youtube.com/watch?v=uoQoCPGyAik
            </link>
            <description>
                
            </description>
            <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
            <guid>
                https://www.youtube.com/watch?v=uoQoCPGyAik
            </guid>
        </item>
        
    </channel>
</rss>
